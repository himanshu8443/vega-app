name: Nightly Build

on:
  schedule:
    # Runs at 2:00 AM UTC
    - cron: '0 2 * * *'
  # Optional: Allow manual trigger
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build'
        required: true
        default: 'main'

jobs:
  build-android:
    runs-on: ubuntu-latest
    # Use the nightly environment with the required secrets
    environment: nightly
    # This ensures the workflow only runs on the specified branch for scheduled runs
    if: github.event_name != 'schedule' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout specific branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || 'main' }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      
      # Decode the keystore from your secret
      - name: Decode keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/release.keystore
          # Verify the keystore was created properly
          ls -la android/app/release.keystore
      
      # Make gradlew executable
      - name: Make gradlew executable
        run: chmod +x android/gradlew
      
      # Create a keystore.properties file in the android directory
      - name: Create keystore.properties
        run: |
          cat > android/keystore.properties << EOF
          storeFile=release.keystore
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          EOF
          
      # Modify build.gradle to ensure it uses our release.keystore
      - name: Update build.gradle for CI
        run: |
          # Back up the original file
          cp android/app/build.gradle android/app/build.gradle.bak
          
          # Replace the signingConfigs section to prioritize our CI setup
          sed -i '/signingConfigs {/,/}/c\
          signingConfigs {\
              release {\
                  def keystorePropertiesFile = rootProject.file("keystore.properties")\
                  if (keystorePropertiesFile.exists()) {\
                      def keystoreProperties = new Properties()\
                      keystoreProperties.load(new FileInputStream(keystorePropertiesFile))\
                      storeFile file(keystoreProperties.getProperty("storeFile"))\
                      storePassword keystoreProperties.getProperty("storePassword")\
                      keyAlias keystoreProperties.getProperty("keyAlias")\
                      keyPassword keystoreProperties.getProperty("keyPassword")\
                  }\
              }\
              debug {\
                  storeFile file("debug.keystore")\
                  storePassword "android"\
                  keyAlias "androiddebugkey"\
                  keyPassword "android"\
              }\
          }' android/app/build.gradle
          
      # Verify the build.gradle changes
      - name: Verify build.gradle changes
        run: cat android/app/build.gradle | grep -A 15 "signingConfigs"
      
      # Build with release configuration 
      - name: Build Android App
        run: |
          cd android
          ./gradlew assembleRelease --info
      
      # Upload APK as artifact for download
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: Vega-Release-APK-$(date +'%Y-%m-%d')
          path: android/app/build/outputs/apk/release/*.apk
          if-no-files-found: warn
      
      # Print information about the generated APK
      - name: APK Info
        run: |
          echo "APK generated at: $(date +'%Y-%m-%d %H:%M:%S')"
          echo "Built from branch: ${{ github.event.inputs.branch || 'main' }}"
          ls -la android/app/build/outputs/apk/release/
          
          # Display signing info (if possible)
          if [ -f "$(find android/app/build/outputs/apk/release -name '*.apk' | head -1)" ]; then
            echo "APK found. Checking signature..."
            APK_PATH=$(find android/app/build/outputs/apk/release -name '*.apk' | head -1)
            echo "APK path: $APK_PATH"
            
            # Use zipinfo to check if the APK is signed (look for META-INF/*.RSA)
            zipinfo -1 "$APK_PATH" | grep -i "META-INF/.*\.RSA" || echo "No signature file found in APK"
          else
            echo "No APK found to analyze"
          fi
