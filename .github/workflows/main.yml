name: Nightly Build

on:
  schedule:
    # Runs at 2:00 AM UTC
    - cron: '0 2 * * *'
  # Optional: Allow manual trigger
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build'
        required: true
        default: 'main'

jobs:
  build-android:
    runs-on: ubuntu-latest
    # Use the nightly environment with the required secrets
    environment: nightly
    # This ensures the workflow only runs on the specified branch for scheduled runs
    if: github.event_name != 'schedule' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout specific branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || 'main' }}
          fetch-depth: 0
      
      # Get the latest commit info for Discord notification
      - name: Get commit info
        id: commit_info
        run: |
          echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "COMMIT_MSG=$(git log -1 --pretty=%B)" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR=$(git log -1 --pretty=%an)" >> $GITHUB_ENV
          echo "COMMIT_DATE=$(git log -1 --pretty=%cd --date=format:'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      
      # Decode the keystore from your secret
      - name: Decode keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/release.keystore
          # Verify the keystore was created properly
          ls -la android/app/release.keystore
      
      # Make gradlew executable
      - name: Make gradlew executable
        run: chmod +x android/gradlew
      
      # Define the build timestamp
      - name: Set build timestamp
        run: |
          echo "BUILD_DATE=$(date -u '+%Y-%m-%d')" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date -u '+%H-%M-%S')" >> $GITHUB_ENV
          echo "Build started at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Builder: himanshu8443"
      
      # Build the APKs with DIRECT SIGNING PARAMETERS as requested
      - name: Build Android App with Direct Signing Parameters
        run: |
          cd android
          KEYSTORE_PATH=$(realpath app/release.keystore)
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=$KEYSTORE_PATH \
            -Pandroid.injected.signing.store.password="${{ secrets.KEYSTORE_PASSWORD }}" \
            -Pandroid.injected.signing.key.alias="${{ secrets.KEY_ALIAS }}" \
            -Pandroid.injected.signing.key.password="${{ secrets.KEY_PASSWORD }}" \
            --stacktrace
      
      # Find and identify the APKs
      - name: Identify APKs
        run: |
          mkdir -p artifacts
          
          # Get app version from build.gradle
          VERSION=$(grep -m 1 "versionName " android/app/build.gradle | sed 's/.*versionName "\(.*\)".*/\1/')
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
          
          # Find all APKs and copy them to artifacts directory
          echo "Finding APKs:"
          find android/app/build/outputs/apk/release -name "*.apk" -not -name "*unsigned*"
          
          # Copy APKs with identifiable names
          cp android/app/build/outputs/apk/release/Vega-*-v*.apk artifacts/ || echo "No renamed APKs found"
          
          # Define variables for each APK type
          UNIVERSAL_APK=$(find android/app/build/outputs/apk/release -name "*universal*.apk" -not -name "*unsigned*" | head -1)
          ARMV7_APK=$(find android/app/build/outputs/apk/release -name "*armeabi-v7a*.apk" -not -name "*unsigned*" | head -1)
          ARMV8_APK=$(find android/app/build/outputs/apk/release -name "*arm64-v8a*.apk" -not -name "*unsigned*" | head -1)
          
          if [ -f "$UNIVERSAL_APK" ]; then
            cp "$UNIVERSAL_APK" artifacts/Vega-v${VERSION}-universal-${{ env.BUILD_DATE }}.apk
            echo "UNIVERSAL_APK_NAME=Vega-v${VERSION}-universal-${{ env.BUILD_DATE }}.apk" >> $GITHUB_ENV
          fi
          
          if [ -f "$ARMV7_APK" ]; then
            cp "$ARMV7_APK" artifacts/Vega-v${VERSION}-armv7-${{ env.BUILD_DATE }}.apk
            echo "ARMV7_APK_NAME=Vega-v${VERSION}-armv7-${{ env.BUILD_DATE }}.apk" >> $GITHUB_ENV
          fi
          
          if [ -f "$ARMV8_APK" ]; then
            cp "$ARMV8_APK" artifacts/Vega-v${VERSION}-armv8-${{ env.BUILD_DATE }}.apk
            echo "ARMV8_APK_NAME=Vega-v${VERSION}-armv8-${{ env.BUILD_DATE }}.apk" >> $GITHUB_ENV
          fi
          
          echo "APKs in artifacts directory:"
          ls -la artifacts/
      
      # Upload APKs as artifacts
      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Vega-v${{ env.APP_VERSION }}-${{ env.BUILD_DATE }}
          path: artifacts/*.apk
          if-no-files-found: warn
      
      # Create and run a dedicated Discord notification script
      - name: Create Discord notification script
        run: |
          cat > send_discord.sh << 'EOF'
          #!/bin/bash

          # Get environment variables
          REPO_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}"
          WORKFLOW_URL="${REPO_URL}/actions/runs/${GITHUB_RUN_ID}"
          ARTIFACTS_URL="${WORKFLOW_URL}/artifacts"
          COMMIT_URL="${REPO_URL}/commit/${GITHUB_SHA}"

          # Format the commit message (escape quotes for JSON)
          FORMATTED_COMMIT_MSG=$(echo "$COMMIT_MSG" | head -n 1 | sed 's/"/\\"/g')
          CURRENT_TIMESTAMP=$(date -u --iso-8601=seconds)

          # Create the JSON payload
          cat > discord_payload.json << EOJSON
          {
            "embeds": [
              {
                "title": "🌙 Vega Nightly Build v${APP_VERSION}",
                "description": "A new nightly build of **Vega App** is ready for testing!",
                "color": 3447003,
                "fields": [
                  {
                    "name": "Version",
                    "value": "v${APP_VERSION} (Build #${GITHUB_RUN_NUMBER})",
                    "inline": true
                  },
                  {
                    "name": "Build Date",
                    "value": "${BUILD_DATE} UTC",
                    "inline": true
                  },
                  {
                    "name": "Latest Commit",
                    "value": "[${COMMIT_HASH}](${COMMIT_URL}) by ${COMMIT_AUTHOR}",
                    "inline": false
                  },
                  {
                    "name": "Commit Message",
                    "value": "${FORMATTED_COMMIT_MSG}",
                    "inline": false
                  },
                  {
                    "name": "Download APKs",
                    "value": "[▶️ **Download All APKs**](${ARTIFACTS_URL})\n\n• [📱 Universal APK](${ARTIFACTS_URL})\n• [📱 ARMv7 APK](${ARTIFACTS_URL})\n• [📱 ARMv8 APK](${ARTIFACTS_URL})",
                    "inline": false
                  }
                ],
                "footer": {
                  "text": "Built by himanshu8443 • Vega App"
                },
                "timestamp": "${CURRENT_TIMESTAMP}"
              }
            ]
          }
          EOJSON

          # Send to Discord
          if [ -n "${DISCORD_WEBHOOK}" ]; then
            curl -H "Content-Type: application/json" -d @discord_payload.json "${DISCORD_WEBHOOK}"
            echo "Discord notification sent successfully"
          else
            echo "Discord webhook URL not set, skipping notification"
          fi
          EOF

          chmod +x send_discord.sh
          
      - name: Send Discord notification
        if: success()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: ./send_discord.sh
